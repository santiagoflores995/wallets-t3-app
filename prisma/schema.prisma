// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model CurrencyUsdConversionRate {
  id         String   @id @default(cuid())
  rate       Float
  date       DateTime
  currencyId String
  currency   Currency @relation(fields: [currencyId], references: [id])
}

model Currency {
  id                        String                      @id @default(cuid())
  name                      String
  symbol                    String                      @unique
  wallet                    Wallet[]
  CurrencyUsdConversionRate CurrencyUsdConversionRate[]
}

model Wallet {
  id             String        @id @default(cuid())
  name           String
  initialBalance Float
  currency       Currency      @relation(fields: [currencyId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  currencyId     String
  transaction    Transaction[]
}

model Transaction {
  id                String    @id @default(cuid())
  name              String
  wallet            Wallet    @relation(fields: [walletId], references: [id])
  value             Float
  date              DateTime
  category          Category? @relation(fields: [categoryId], references: [id])
  walletId          String
  categoryId        String?
  sourceTransaction Transfer? @relation("SourceTransaction")
  targetTransaction Transfer? @relation("TargetTransaction")
}

model Transfer {
  id                  String      @id @default(cuid())
  name                String
  date                DateTime
  sourceTransaction   Transaction @relation("SourceTransaction", fields: [sourceTransactionId], references: [id])
  sourceTransactionId String      @unique
  targetTransaction   Transaction @relation("TargetTransaction", fields: [targetTransactionId], references: [id])
  targetTransactionId String      @unique
}

model Category {
  id          String        @id @default(cuid())
  name        String
  expense     Boolean
  transaction Transaction[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text 
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
